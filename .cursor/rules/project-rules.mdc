---
description:
globs:
alwaysApply: true
---

# My Modern Application Sample - Cursor Rules

## プロジェクト概要
このプロジェクトはモダンアプリケーションのサンプル集です。

## 技術スタック
- **言語**: Go
- **AWS SDK**: aws-sdk-go-v2
- **コンテナ**: Docker
- **アーキテクチャ**: サーバーレス

## コーディング規約

### Go言語規約
- Go標準のフォーマット（gofmt）に従う
- 関数名、変数名は日本語コメントを併記
- エラーハンドリングは必須
- defer文を適切に使用してリソースクリーンアップ

### AWS Lambda規約
- `lambda.Start(handler)` をmain関数で呼び出す
- ハンドラー関数は適切なAWS Lambdaイベント型を使用
- 環境変数は起動時に読み込み、グローバル変数として保持
- パニック発生時のrecoverを実装

### AWS SDK使用規約
- AWS SDK Go v2を使用
- `config.LoadDefaultConfig(ctx)`でAWS設定を読み込み
- 各AWSサービスクライアントは関数レベルまたはグローバルで初期化
- リソース名には環境変数（ENV）を含める命名規則を使用

### エラーハンドリング
- すべてのAWS API呼び出しでエラーチェック
- ログ出力には`log.Printf`を使用
- Lambda関数では適切なHTTPステータスコードを返す
- 内部エラーの詳細は外部に露出しない

### セキュリティ
- 認証情報は環境変数またはIAMロールを使用
- パスワードやAPIキーはハードコーディングしない
- S3署名付きURLには適切な有効期限を設定
- DynamoDBアクセスは最小権限の原則に従う

## ファイル作成・編集時の注意点

### 新しいLambda関数を作成する場合
1. `applications/`配下に新しいディレクトリを作成
2. `go.mod`ファイルで適切なモジュール名を設定
3. 必要なAWS SDKの依存関係を追加
4. 環境変数の読み込みとエラーハンドリングを実装
5. 共通Dockerfileを使用してコンテナビルド可能にする

### 既存コードを修正する場合
- 既存のエラーハンドリングパターンを踏襲
- AWS リソース名の命名規則を維持
- ログ出力レベルと形式を統一
- 環境変数の使用方法を統一

### 依存関係管理
- `go mod tidy`で不要な依存関係を削除
- AWS SDK のバージョンは統一する
- セキュリティアップデートは定期的に適用

## 開発時のベストプラクティス
- コード変更前にローカルでビルドテスト
- AWS リソースの作成/削除はIaCツールを使用
- 環境別（dev/stg/prod）の設定を分離
- Lambda関数のメモリとタイムアウト設定を適切に調整
- CloudWatch Logsでの監視とデバッグを考慮

## 禁止事項
- 本番環境の認証情報をコードにハードコーディング
- 大きなファイルのLambda関数内処理（S3経由を使用）
- 不適切な権限設定のIAMロール作成
- 環境変数なしでのAWSリソース名決定

## コメント規約
- 関数の先頭に処理概要を日本語でコメント
- 複雑なビジネスロジックには説明コメントを追加
- AWS API呼び出し箇所には何を行っているかコメント
- TODOコメントには担当者と期限を明記
