name: build-and-deploy-lambda-tmp
on:
  push:
    branches: [main]
    paths:
      - lambda/tmp/**
      - .github/workflows/build-and-deploy-lambda-tmp.yml
  workflow_dispatch:
env:
  ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
  SESSION_NAME: gh-oidc-${{ github.run_id }}-${{ github.run_attempt }}
  ECR_REPOSITORY_URI: ${{ secrets.AWS_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com/my-modern-application-sample-prod-tmp
defaults: # パイプエラーを拾えるようにデフォルトシェルを設定
  run:
    shell: bash
concurrency: # コミット追加時に古いワークフローの実行を自動キャンセル
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4 # 一時クレデンシャルの取得
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ap-northeast-1
      - uses: ./.github/actions/build-image/
        id: build
        with:
          ecr-repository-uri: ${{ env.ECR_REPOSITORY_URI }}
          dockerfile-path: lambda
          function-name: tmp
      # - uses: ./.github/actions/deploy-lambda/
      #   with:
      #     function-name: my-modern-application-sample-prod-tmp
      #     container-image: ${{ steps.build.outputs.container-image }}
