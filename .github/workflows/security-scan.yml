name: Security Scan with Trivy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # schedule:
  #   # 毎日21時（UTC）に実行
  #   - cron: "0 21 * * *"
  workflow_dispatch:

defaults: # パイプエラーを拾えるようにデフォルトシェルを設定
  run:
    shell: bash

concurrency: # コミット追加時に古いワークフローの実行を自動キャンセル
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  trivy-secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # シークレットスキャンには全履歴が必要

      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          scanners: "secret"
          format: "sarif"
          output: "trivy-secret-results.sarif"
          trivy-config: "trivy.yaml"
        continue-on-error: true

      # - name: Check if SARIF file exists
      #   id: check-secret-sarif
      #   run: |
      #     if [ -f "trivy-secret-results.sarif" ]; then
      #       echo "sarif-exists=true" >> "$GITHUB_OUTPUT"
      #     else
      #       echo "sarif-exists=false" >> "$GITHUB_OUTPUT"
      #       echo "SARIF file not generated, creating empty file"
      #       echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Trivy","version":"unknown"}},"results":[]}]}' > trivy-secret-results.sarif
      #     fi

      # - name: Upload Trivy secret scan results to GitHub Security tab
      #   uses: github/codeql-action/upload-sarif@v3
      #   if: always()
      #   with:
      #     sarif_file: "trivy-secret-results.sarif"

  # trivy-vulnerability-scan:
  #   name: Vulnerability Scan
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run Trivy vulnerability scanner in repo mode
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: "fs"
  #         scan-ref: "."
  #         scanners: "vuln"
  #         format: "sarif"
  #         output: "trivy-vuln-results.sarif"
  #         trivy-config: "trivy.yaml"
  #       continue-on-error: true

  #     - name: Check if SARIF file exists
  #       id: check-vuln-sarif
  #       run: |
  #         if [ -f "trivy-vuln-results.sarif" ]; then
  #           echo "sarif-exists=true" >> "$GITHUB_OUTPUT"
  #         else
  #           echo "sarif-exists=false" >> "$GITHUB_OUTPUT"
  #           echo "SARIF file not generated, creating empty file"
  #           echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Trivy","version":"unknown"}},"results":[]}]}' > trivy-vuln-results.sarif
  #         fi

  #     - name: Upload Trivy vulnerability scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: "trivy-vuln-results.sarif"

  #     - name: Run Trivy vulnerability scanner for summary
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: "fs"
  #         scan-ref: "."
  #         scanners: "vuln"
  #         format: "table"
  #         trivy-config: "trivy.yaml"
  #       continue-on-error: true

  # trivy-config-scan:
  #   name: Configuration Scan
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run Trivy config scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: "config"
  #         scan-ref: "."
  #         format: "sarif"
  #         output: "trivy-config-results.sarif"
  #         trivy-config: "trivy.yaml"
  #       continue-on-error: true

  #     - name: Check if SARIF file exists
  #       id: check-config-sarif
  #       run: |
  #         if [ -f "trivy-config-results.sarif" ]; then
  #           echo "sarif-exists=true" >> "$GITHUB_OUTPUT"
  #         else
  #           echo "sarif-exists=false" >> "$GITHUB_OUTPUT"
  #           echo "SARIF file not generated, creating empty file"
  #           echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Trivy","version":"unknown"}},"results":[]}]}' > trivy-config-results.sarif
  #         fi

  #     - name: Upload Trivy config scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: "trivy-config-results.sarif"

  #     - name: Run Trivy config scanner for summary
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: "config"
  #         scan-ref: "."
  #         format: "table"
  #         trivy-config: "trivy.yaml"
  #       continue-on-error: true

  # trivy-docker-scan:
  #   name: Docker Image Scan
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   if: github.event_name == 'push' || github.event_name == 'schedule'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Build Docker image
  #       run: |
  #         cd lambda/hello-world
  #         docker build -t hello-world:latest .

  #     - name: Run Trivy vulnerability scanner on Docker image
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: "hello-world:latest"
  #         format: "sarif"
  #         output: "trivy-docker-results.sarif"
  #       continue-on-error: true

  #     - name: Check if SARIF file exists
  #       id: check-docker-sarif
  #       run: |
  #         if [ -f "trivy-docker-results.sarif" ]; then
  #           echo "sarif-exists=true" >> "$GITHUB_OUTPUT"
  #         else
  #           echo "sarif-exists=false" >> "$GITHUB_OUTPUT"
  #           echo "SARIF file not generated, creating empty file"
  #           echo '{"version":"2.1.0","runs":[{"tool":{"driver":{"name":"Trivy","version":"unknown"}},"results":[]}]}' > trivy-docker-results.sarif
  #         fi

  #     - name: Upload Trivy Docker scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v3
  #       if: always()
  #       with:
  #         sarif_file: "trivy-docker-results.sarif"

  #     - name: Run Trivy vulnerability scanner on Docker image for summary
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         image-ref: "hello-world:latest"
  #         format: "table"
  #       continue-on-error: true

  # trivy-license-scan:
  #   name: License Scan
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 10
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Run Trivy license scanner
  #       uses: aquasecurity/trivy-action@master
  #       with:
  #         scan-type: "fs"
  #         scan-ref: "."
  #         scanners: "license"
  #         format: "table"
  #         output: "trivy-license-results.txt"
  #         trivy-config: "trivy.yaml"
  #       continue-on-error: true

  #     - name: Display license scan results
  #       if: always()
  #       run: |
  #         if [ -f "trivy-license-results.txt" ]; then
  #           {
  #             echo "## License Scan Results"
  #             echo '```'
  #             cat trivy-license-results.txt
  #             echo '```'
  #           } >> "$GITHUB_STEP_SUMMARY"
  #         else
  #           {
  #             echo "## License Scan Results"
  #             echo "License scan completed but no results file generated."
  #           } >> "$GITHUB_STEP_SUMMARY"
  #         fi

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [
        trivy-secret-scan,
        # trivy-vulnerability-scan,
        # trivy-config-scan,
        # trivy-license-scan,
      ]
    if: always()
    steps:
      - name: Security scan summary
        # TODO: 復元
        # run: |
        #   {
        #     echo "## 🔒 Security Scan Summary"
        #     echo "| Scan Type | Status |"
        #     echo "|-----------|--------|"
        #     echo "| Secret Scan | ${{ needs.trivy-secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
        #     echo "| Vulnerability Scan | ${{ needs.trivy-vulnerability-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
        #     echo "| Configuration Scan | ${{ needs.trivy-config-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
        #     echo "| License Scan | ${{ needs.trivy-license-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
        #     echo ""
        #     echo "詳細な結果は各ジョブのログとGitHub Security タブを確認してください。"
        #   } >> "$GITHUB_STEP_SUMMARY"
        run: |
          {
            echo "## 🔒 Security Scan Summary"
            echo "| Scan Type | Status |"
            echo "|-----------|--------|"
            echo "| Secret Scan | ${{ needs.trivy-secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |"
            echo ""
            echo "詳細な結果は各ジョブのログとGitHub Security タブを確認してください。"
          } >> "$GITHUB_STEP_SUMMARY"
