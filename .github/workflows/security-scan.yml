name: Security Scan with Trivy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # 毎日21時（UTC）に実行
    - cron: "0 21 * * *"

defaults: # パイプエラーを拾えるようにデフォルトシェルを設定
  run:
    shell: bash

concurrency: # コミット追加時に古いワークフローの実行を自動キャンセル
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  trivy-secret-scan:
    name: Secret Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # シークレットスキャンには全履歴が必要

      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          scanners: "secret"
          format: "sarif"
          output: "trivy-secret-results.sarif"
          trivy-config: "trivy.yaml"

      - name: Upload Trivy secret scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-secret-results.sarif"

  trivy-vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          scanners: "vuln"
          format: "sarif"
          output: "trivy-vuln-results.sarif"
          trivy-config: "trivy.yaml"

      - name: Upload Trivy vulnerability scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-vuln-results.sarif"

      - name: Run Trivy vulnerability scanner for summary
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          scanners: "vuln"
          format: "table"
          trivy-config: "trivy.yaml"

  trivy-config-scan:
    name: Configuration Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy config scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "."
          format: "sarif"
          output: "trivy-config-results.sarif"
          trivy-config: "trivy.yaml"

      - name: Upload Trivy config scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-config-results.sarif"

      - name: Run Trivy config scanner for summary
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "config"
          scan-ref: "."
          format: "table"
          trivy-config: "trivy.yaml"

  trivy-docker-scan:
    name: Docker Image Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          cd lambda/hello-world
          docker build -t hello-world:latest .

      - name: Run Trivy vulnerability scanner on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "hello-world:latest"
          format: "sarif"
          output: "trivy-docker-results.sarif"

      - name: Upload Trivy Docker scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-docker-results.sarif"

      - name: Run Trivy vulnerability scanner on Docker image for summary
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "hello-world:latest"
          format: "table"

  trivy-license-scan:
    name: License Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy license scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          scanners: "license"
          format: "table"
          output: "trivy-license-results.txt"

      - name: Display license scan results
        if: always()
        run: |
          echo "## License Scan Results" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat trivy-license-results.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs:
      [
        trivy-secret-scan,
        trivy-vulnerability-scan,
        trivy-config-scan,
        trivy-license-scan,
      ]
    if: always()
    steps:
      - name: Security scan summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.trivy-secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Vulnerability Scan | ${{ needs.trivy-vulnerability-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration Scan | ${{ needs.trivy-config-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Scan | ${{ needs.trivy-license-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "詳細な結果は各ジョブのログとGitHub Security タブを確認してください。" >> $GITHUB_STEP_SUMMARY
